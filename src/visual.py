import time

import cv2
import numpy as np
import data

drone_last_pos = (0, 0)
map = np.full((1000, 1000, 3), 255)
xsize, ysize = data.map_data.shape


brum = [[975, 177], [980, 177], [977, 177], [983, 178], [987, -179], [995, -177], [999, -175], [999, -173], [1021, -171], [1028, -170], [1033, -168], [1060, -167], [1196, -165], [3909, -164], [3955, -162], [3944, -160], [3993, -158], [3881, -157], [3873, -155], [3848, -154], [3775, -153], [3760, -151], [3659, -150], [3664, -149], [3570, -147], [3543, -146], [3556, -144], [3494, -143], [3495, -141], [3472, -139], [3500, -135], [3436, -133], [3433, -131], [3469, -130], [3434, -130], [3466, -127], [3475, -125], [3462, -123], [3460, -121], [3507, -120], [3513, -119], [3523, -118], [3529, -117], [3505, -116], [3569, -115], [3605, -113], [3647, -111], [3734, -110], [3768, -108], [3793, -107], [3784, -105], [3784, -103], [3781, -102], [3781, -100], [3765, -98], [3816, -96], [3723, -95], [3664, -94], [3468, -92], [3487, -91], [3482, -90], [3248, -89], [3266, -88], [3281, -87], [3281, -87], [3361, -86], [3409, -86], [3225, -84], [3250, -83], [3199, -81], [3215, -79], [3111, -78], [3077, -77], [3154, -77], [3094, -76], [3153, -74], [2473, -72], [1525, -70], [1400, -69], [1312, -68], [1294, -66], [1282, -65], [1245, -63], [1230, -62], [1236, -59], [1232, -57], [1263, -56], [1324, -55], [1311, -53], [1312, -51], [1373, -50], [1936, -49], [1940, -48], [1941, -46], [1929, -45], [1209, -43], [1209, -41], [1910, -40], [1925, -39], [1921, -37], [1292, -36], [1919, -35], [1936, -33], [1967, -32], [2049, -30], [2298, -29], [2545, -27], [2582, -26], [2549, -25], [2564, -23], [2310, -22], [1978, -20], [2219, -18], [2200, -16], [2338, -14], [1421, -12], [2117, -10], [2065, -9], [2423, -7], [2465, -5], [2465, -2], [2599, 0], [2505, 0], [2556, 2], [3057, 4], [2763, 5], [2304, 7], [3108, 8], [2902, 10], [3193, 11], [3261, 12], [3451, 14], [3641, 15], [3026, 16], [3231, 18], [3809, 19], [3671, 20], [3525, 22], [3566, 23], [3242, 25], [3213, 26], [3213, 28], [3108, 29], [2540, 30], [2415, 31], [2233, 32], [2134, 33], [2213, 34], [2147, 35], [2319, 36], [2263, 36], [2107, 37], [2111, 38], [2128, 38], [2147, 39], [2181, 40], [1989, 41], [2061, 42], [2059, 43], [2061, 44], [2080, 45], [2057, 47], [1942, 48], [2011, 49], [2170, 51], [1985, 52], [1812, 53], [1425, 55], [1315, 57], [1218, 58], [1165, 60], [1152, 62], [1108, 63], [1107, 63], [1094, 63], [1097, 64], [1091, 64], [1091, 64], [1088, 65], [1081, 66], [1083, 67], [1076, 68], [1078, 68], [1082, 69], [1076, 70], [1084, 71], [1077, 72], [1077, 73], [1087, 73], [1087, 74], [1084, 75], [1085, 76], [1087, 77], [1087, 79], [1087, 80], [1088, 82], [1092, 84], [1088, 85], [1091, 87], [1093, 89], [1091, 90], [1093, 92], [1096, 94], [1096, 95], [1102, 96], [1105, 97], [1106, 98], [1105, 99], [1106, 101], [1119, 102], [1125, 103], [1124, 104], [1135, 105], [1144, 107], [1162, 108], [1194, 110], [1321, 112], [1376, 113], [2455, 114], [1817, 116], [2048, 117], [2122, 119], [2011, 120], [2616, 121], [2177, 122], [3286, 124], [2302, 125], [2521, 127], [2429, 128], [2422, 130], [2416, 132], [2406, 134], [2386, 135], [2386, 137], [2364, 138], [2339, 139], [2303, 141], [2295, 142], [2268, 143], [2272, 144], [2221, 145], [2328, 146], [2339, 147], [1769, 149], [1574, 150], [1045, 151], [1024, 153], [1020, 154], [1016, 156], [1010, 157], [1009, 159], [1006, 160], [1006, 161], [1006, 163], [1012, 164], [1007, 165], [1011, 166], [1012, 168], [1011, 169], [1009, 170], [1011, 171], [1011, 173], [1011, 174], [1013, 175], [1013, 177]]

def map_init():

    data.map_data = np.zeros((xsize, ysize))

    map = np.full((1000, 1000, 3), 255)

    #draw drone position (in center)
    pass


def update_map(dist, curr_angle):

    xpos = np.cos(-curr_angle/180*np.pi)*dist/16 + xsize/2
    ypos = np.sin(-curr_angle/180*np.pi)*dist/16 + ysize/2

    data.map_data[round(xpos), round(ypos)] = 1

    print(round(xpos), round(ypos))

    cv2.imshow("Brum...", data.map_data)

    pass


if __name__ == "__main__":
    map_init()
    for i in brum:
        update_map(*i)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    if cv2.waitKey(0) & 0xFF == ord('q'):
        pass

